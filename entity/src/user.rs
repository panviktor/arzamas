//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i64,
    #[sea_orm(unique)]
    pub user_id: String,
    pub email: String,
    pub username: String,
    pub pass_hash: String,
    pub email_validated: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
    #[sea_orm(has_one = "super::user_security_settings::Entity")]
    UserSecuritySettings,
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<super::user_security_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSecuritySettings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
