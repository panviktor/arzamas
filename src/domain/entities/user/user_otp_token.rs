use chrono::{DateTime, Utc};

/// `UserOtpToken` holds the necessary details for handling One-Time Passwords (OTP)
/// for both email and authenticator app-based two-factor authentication (2FA) mechanisms.
///
/// This structure is used to validate OTPs entered by users during the login process
/// and to manage the lifecycle and validity of these tokens.
pub struct UserOtpToken {
    /// Unique identifier for the user associated with these tokens.
    pub user_id: String,

    /// Hash of the OTP sent via email. This is used for verifying the OTP entered by the user.
    pub otp_email_hash: Option<String>,

    /// The expiration time of the email OTP. OTPs past this time should be considered invalid.
    pub otp_email_valid_time: Option<DateTime<Utc>>,

    /// Hash of the OTP generated by an authenticator app. This hash is used to verify the OTP
    /// entered by the user matches the expected value.
    pub otp_app_hash: Option<String>,

    /// The expiration time of the app OTP. Similar to email OTP, OTPs past this time should be invalid.
    pub otp_app_valid_time: Option<DateTime<Utc>>,

    /// Optional mnemonic for the OTP. This is used for recovery purposes and should be handled with
    /// care to avoid security risks. It's typically not recommended to store this unless absolutely necessary.
    pub otp_app_mnemonic: Option<String>,

    /// General expiration time for the OTP token session. This might control the entire session's validity
    /// for OTP entry and should be checked before accepting any OTP entries.
    pub expiry: DateTime<Utc>,

    /// Count of failed OTP attempts. This can be used to implement rate limiting or account locking mechanisms
    /// after a certain number of failed attempts to prevent brute force attacks.
    pub attempt_count: i32,
}
